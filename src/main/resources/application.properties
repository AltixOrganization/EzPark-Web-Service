spring.application.name=ezpark
server.port=8080
#server.servlet.context-path=/api/v1
#spring.config.import=optional:file:.env.development
spring.profiles.active=postgres

imgbb.api.url=https://api.imgbb.com/1/upload
imgbb.api.key=7dd3cdb01c10f53004533b2528768623
spring.servlet.multipart.enabled=true

authorization.jwt.secret=AbCdEfGhIjKlMnOpQrStUvWxYz1234567890
authorization.jwt.expiration.days=7

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=ezpark-group
spring.kafka.consumer.auto-offset-reset=earliest

# Configuración del Productor para enviar objetos Java como JSON
# El serializador de la clave puede seguir siendo String, es muy común.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# ¡CAMBIO CLAVE! Spring convertirá automáticamente tu objeto (ej: ReservaCreadaEvent) a JSON.
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Configuración del Consumidor para recibir JSON y convertirlo a objetos Java
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# ¡CAMBIO CLAVE! Spring convertirá automáticamente el JSON recibido a tu objeto Java.
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# PROPIEDAD DE SEGURIDAD CRÍTICA para JsonDeserializer
# Indica a Spring qué paquetes son seguros para deserializar.
# Si no pones esto, el consumidor dará un error de "untrusted packages".
# Para producción, es mejor ser más específico.
# Ejemplo: spring.kafka.consumer.properties.spring.json.trusted.packages=com.altix.ezpark.common.events
spring.kafka.consumer.properties.spring.json.trusted.packages=*